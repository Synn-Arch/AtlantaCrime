tm_shape(landuse.shp_atlanta$geometry) + tm_polygons(col = "LandUse", style = "jenks") +
tm_shape(tract_atlanta_2$geometry) + tm_polygons(alpha = 0, border.col = "red", col = 'yellow') +
tm_shape(atlanta$geometry) + tm_polygons(alpha = 0, border.col = "green")
tm_basemap("OpenStreetMap") +
# tm_shape(landuse.shp_atlanta$geometry) + tm_polygons(col = "LandUse", style = "jenks") +
# tm_shape(tract_atlanta_2$geometry) + tm_polygons(alpha = 0, border.col = "red", col = 'yellow') +
tm_shape(atlanta$geometry) + tm_polygons(alpha = 0, border.col = "green")
tm_basemap("OpenStreetMap") +
tm_shape(landuse.shp_atlanta$geometry) + tm_polygons(col = "LandUse", style = "jenks") +
tm_shape(tract_atlanta_2$geometry) + tm_polygons(alpha = 0, border.col = "red", col = 'yellow') +
tm_shape(atlanta$geometry) + tm_polygons(alpha = 0, border.col = "green")
tm_basemap("OpenStreetMap") +
tm_shape(landuse.shp_atlanta$geometry) + tm_polygons(col = "LandUse", style = "jenks") +
tm_shape(tract_atlanta_2$geometry) + tm_polygons(alpha = 0, border.col = "red") +
tm_shape(atlanta$geometry) + tm_polygons(alpha = 0, border.col = "green")
tmap_mode("view")
tm_basemap("OpenStreetMap") +
tm_shape(landuse.shp_atlanta$geometry) + tm_polygons(col = "LandUse", style = "jenks") +
tm_shape(tract_atlanta_2$geometry) + tm_polygons(alpha = 0, border.col = "red") +
tm_shape(atlanta$geometry) + tm_polygons(alpha = 0, border.col = "green")
landuse.shp_atlanta
tm_basemap("OpenStreetMap") +
tm_shape(landuse.shp_atlanta$geometry) + tm_polygons(col = "LandUse", style = "jenks") +
tm_shape(tract_atlanta_2$geometry) + tm_polygons(alpha = 0, border.col = "red") +
tm_shape(atlanta$geometry) + tm_polygons(alpha = 0, border.col = "green")
tm_basemap("OpenStreetMap") +
tm_shape(landuse.shp_atlanta$geometry) + tm_polygons(col = "blue", style = "jenks") +
tm_shape(tract_atlanta_2$geometry) + tm_polygons(alpha = 0, border.col = "red") +
tm_shape(atlanta$geometry) + tm_polygons(alpha = 0, border.col = "green")
# tract_atlanta <- tract_atlanta[st_intersects(tract_atlanta, atlanta, sparse = FALSE),]
tract_atlanta <- st_intersection(tract_atlanta,atlanta)
landuse.shp_atlanta <- st_zm(landuse.shp_atlanta, drop = TRUE, what = "ZM")
tract_atlanta <- st_zm(tract_atlanta, drop = TRUE, what = "ZM")
landuse.shp_atlanta <- st_make_valid(landuse.shp_atlanta)
tract_atlanta <- st_make_valid(tract_atlanta)
landuse.shp_atlanta <- st_buffer(landuse.shp_atlanta, dist = 0)
tract_atlanta <- st_buffer(tract_atlanta, dist = 0)
tmap_mode("view")
tm_basemap("OpenStreetMap") +
tm_shape(landuse.shp_atlanta$geometry) + tm_polygons(col = "LandUse", style = "jenks") +
tm_shape(tract_atlanta$geometry) + tm_polygons(alpha = 0, border.col = "red") +
tm_shape(atlanta$geometry) + tm_polygons(alpha = 0, border.col = "green")
tm_basemap("OpenStreetMap") +
tm_shape(landuse.shp_atlanta$geometry) + tm_polygons(col = "blue", style = "jenks") +
tm_shape(tract_atlanta$geometry) + tm_polygons(alpha = 0, border.col = "red") +
tm_shape(atlanta$geometry) + tm_polygons(alpha = 0, border.col = "green")
View(tract_atlanta_2)
rm(tract_atlanta_2)
unique(landuse.shp_atlanta$LandUse)
head(tract_atlanta)
View(tract_atlanta)
head(tract_atlanta$NAME)
tract_atlanta <- separate(
data = tract_atlanta,
col = NAME,
into = c("block", "tract", "county", "state"),
sep = "; ")
unique(tract_atlanta$block)
unique(tract_atlanta$county)
unique(tract_atlanta$tract)
unique(tract_atlanta$state)
tract_atlanta <- sel(tract_atlanta, c(GEO_ID, block, tract, county, geometry))
tract_atlanta <- select(tract_atlanta, c(GEO_ID, block, tract, county, geometry))
tract_atlanta <- select(tract_atlanta, c(GEOID, block, tract, county, geometry))
landuse.shp_atlanta <- st_zm(landuse.shp_atlanta, drop = TRUE, what = "ZM")
tract_atlanta <- st_zm(tract_atlanta, drop = TRUE, what = "ZM")
landuse.shp_atlanta <- st_make_valid(landuse.shp_atlanta)
tract_atlanta <- st_make_valid(tract_atlanta)
landuse.shp_atlanta <- st_buffer(landuse.shp_atlanta, dist = 0)
tract_atlanta <- st_buffer(tract_atlanta, dist = 0)
landuse.shp_atlanta <- landuse.shp_atlanta %>% st_transform(crs = 4326)
tract_atlanta <- tract_atlanta %>% st_transform(crs = 4326)
View(landuse.shp_atlanta)
View(tract_atlanta)
landuse.shp_atlanta.clipped <- st_intersection(landuse.shp_atlanta, tract_atlanta)
tm_shape(atlanta$geometry) + tm_polygons(alpha = 0, border.col = "green")
tm_basemap("OpenStreetMap") +
tm_shape(tract_atlanta$geometry) + tm_polygons(alpha = 0, border.col = "red") +
tm_shape(clipped.landuse$geometry) + tM_polygons(col = "LandUse", style = "jenks")
tm_shape(atlanta$geometry) + tm_polygons(alpha = 0, border.col = "green")
tm_basemap("OpenStreetMap") +
tm_shape(tract_atlanta$geometry) + tm_polygons(alpha = 0, border.col = "red") +
tm_shape(clipped.landuse$geometry) + tm_polygons(col = "LandUse", style = "jenks")
tm_basemap("OpenStreetMap") +
tm_shape(tract_atlanta$geometry) + tm_polygons(alpha = 0, border.col = "red") +
tm_shape(clipped.landuse$geometry) + tm_polygons(col = "blue", style = "jenks")
clipped.landuse_atlanta <- st_intersection(clipped.landuse,atlanta)
clipped.landuse <- st_buffer(clipped.landuse, dist = 0)
clipped.landuse <- st_make_valid(clipped.landuse)
atlanta <- st_make_valid(atlanta)
atlanta <- st_make_valid(atlanta)
clipped.landuse_atlanta <- st_intersection(clipped.landuse,atlanta)
writeOGR(clipped.landuse, ".",layer = "poly", driver = "ESRI Shapefile")
writeOGR(clipped.landuse, ".",layer = "poly", driver = "ESRI Shapefile")
getwd()
st_write(clipped.landuse, "C:/Users/Hojung Yu/Documents/clipped.landuse.shp")
# POLYGON 타입만 선택
clipped.landuse_polygon <- clipped.landuse[st_geometry_type(clipped.landuse) == "POLYGON", ]
# Shapefile로 저장
st_write(clipped.landuse_polygon, "C:/Users/Hojung Yu/Documents/clipped.landuse.shp")
View(clipped.landuse_polygon)
View(clipped.landuse)
type(clipped.landuse)
class(clipped.landuse)
tm_basemap("OpenStreetMap") +
tm_shape(clipped.landuse$geometry) + tm_polygons(col = "blue", style = "jenks") +
tm_shape(atlanta$geometry) + tm_polygons(alpha = 0, border.col = "green")
clipped.landuse.clean <- clipped.landuse %>%
group_by(block)
View(clipped.landuse.clean)
head(clipped.landuse)
merged_landuse <- clipped.landuse %>%
group_by(block, LandUse) %>%
summarize(
geometry = st_union(geometry),
ACRES = sum(ACRES),  # Sum up acres if applicable
.groups = "drop"     # Ungroup after summarizing
)
View(landuse.shp_atlanta)
tm_basemap("OpenStreetMap") +
tm_shape(atlanta$geometry) + tm_polygons(alpha = 0, border.col = "green")
tm_basemap("OpenStreetMap") +
tm_shape(landuse.shp_atlanta$geometry) + tm_polygons(col = "blue", style = "jenks") +
tm_shape(tract_atlanta$geometry) + tm_polygons(alpha = 0, border.col = "red") +
tm_shape(atlanta$geometry) + tm_polygons(alpha = 0, border.col = "green")
rm(list = ls())
library(tidyverse)
library(GGally)
library(sjPlot)
library(car)
library(leaps)
getwd()
setwd("C:/Users/Hojung Yu/Documents/GitHub/AtlantaCrime/")
df <- read.csv("data_final.csv")
head(df)
nrow(df)
ncol(df)
summary(df)
colnames(df)
ggpairs(df[,reg_variables])
#Violent crime model
reg_variables = c("pop_den", "black_ratio", "median_incomeE", "Commercial",
"HighdensityResidential", "Industrial","Institutional",
"LowdensityResidential", "ResidentialCommercial",
"min_station_dist", "violent_ratio", "nonviolent_ratio")
model_1 <- lm(violent_ratio_square ~ pop_den + median_incomeE +
LowdensityResidential, data = df)
df <- df %>%
mutate(violent_ratio_square = (violent_ratio*1000),
nonviolent_ratio_square = (nonviolent_ratio*1000))
df$pop_den <- df$pop_den * 100
df$black_ratio <- df$black_ratio * 100
model_1 <- lm(violent_ratio_square ~ pop_den + median_incomeE +
LowdensityResidential, data = df)
summary(model_1)
model_2 <- lm(nonviolent_ratio_square ~ pop_den + black_ratio + median_incomeE + LowdensityResidential, data = df)
summary(model_2)
cor_matrix <- cor(df[reg_variables])
round(cor_matrix,2)
model_2 <- lm(nonviolent_ratio_square ~ pop_den + black_ratio + LowdensityResidential, data = df)
summary(model_2)
model_2 <- lm(nonviolent_ratio_square ~ pop_den + median_incomeE + LowdensityResidential, data = df)
summary(model_2)
model_2-1 <- lm(nonviolent_ratio_square ~ pop_den + black_ratio + median_incomeE + Commercial, data = df)
model_2-1 <- lm(nonviolent_ratio_square ~ pop_den + black_ratio + median_incomeE + Commercial, data = df)
model_2_1 <- lm(nonviolent_ratio_square ~ pop_den + black_ratio + median_incomeE + Commercial, data = df)
summary(model_2_1)
model_2_1 <- lm(nonviolent_ratio_square ~ pop_den + median_incomeE + Commercial, data = df)
summary(model_2_1)
plot(fitted(model_2), resid(model_2), abline(h=0), pch =19)
plot(fitted(model_2_1), resid(model_2_1), abline(h=0), pch = 19)
plot(fitted(model_2), resid(model_2), abline(h=0), pch =19)
plot(fitted(model_2_1), resid(model_2_1), abline(h=0), pch = 19)
AIC(model_2, model_2_1)
View(df)
##Stepwise
null.model <- lm(violent_ratio_square ~ 1, data = df)
df$less_than_hs_ratio <- df$less_than_hs_ratio * 100
full.model <- lm(violent_ratio_square ~ pop_den + median_incomeE + black_ratio +
LowdensityResidential + less_than_hs_ratio, data = df)
step.model.for <- step(null.model,
scope = formula(full.model),
direction = "forward",
trace = 0)
step.model.back <- step(full.model,
direction = "backward",
trace = 0)
step.model.both <- step(null.model,
scope = formula(full.model),
direction = "both",
trace = 0)
stargazer(step.model.for, step.model.back, step.model.both,
type = "text",
add.ines = list(c("AIC", round(AIC(step.model.for),1), round(AIC(step.model.back),1), round(AIC(step.model.both),
1))),
column.labels = c("Forward", "Backward", "Both"))
library(stargazer)
stargazer(step.model.for, step.model.back, step.model.both,
type = "text",
add.ines = list(c("AIC", round(AIC(step.model.for),1), round(AIC(step.model.back),1), round(AIC(step.model.both),
1))),
column.labels = c("Forward", "Backward", "Both"))
stargazer(step.model.for, step.model.back, step.model.both,
type = "text",
add.ines = list(c("AIC", round(AIC(step.model.for),1), round(AIC(step.model.back),1), round(AIC(step.model.both),1))),
column.labels = c("Forward", "Backward", "Both"))
stargazer(step.model.for, step.model.back, step.model.both,
type = "text",
add.lines = list(c("AIC", round(AIC(step.model.for),1), round(AIC(step.model.back),1), round(AIC(step.model.both),1))),
column.labels = c("Forward", "Backward", "Both"))
subset.model <- regsubsets(formula(full.model),
data = df,
nvmax = 5,
method = "exhaustive")
reg.summary <- summary(subset.model)
reg.summary
par(mfrow = c(2,2)) # This code specifies that, instead of showing only one graph in the plots window, you want 4 (2 x 2) graphs.
plot(reg.summary$rsq, # This code plots the number of variables on x-axis and r-squared values on y-axis
xlab = "Number of variables",
ylab = "R-Squared",
type = "l") # type = "l" means that you want to display the graph with a line, not points.
par(mfrow = c(2,2)) # This code specifies that, instead of showing only one graph in the plots window, you want 4 (2 x 2) graphs.
plot(reg.summary$rsq, # This code plots the number of variables on x-axis and r-squared values on y-axis
xlab = "Number of variables",
ylab = "R-Squared",
type = "l") # type = "l" means that you want to display the graph with a line, not points.
plot2 <- plot(reg.summary$adjr2, # Adjusted r-squared values on y-axis
xlab = "Number of variables",
ylab = "Adjusted R-Sqaured",
type = "l")
points(which.max(reg.summary$adjr2), # This code inserts a red dot on the line graph. The red dot denotes the point where the adjusted R-squared is at its highest.
reg.summary$adjr2[which.max(reg.summary$adjr2)],
col="red",
cex=2,
pch=20)
plot(reg.summary$rss, # sum of squares residual values on y-axis
xlab = "Number of variables",
ylab = "RSS",
type = "l")
plot(reg.summary$bic, # BIC values on y-axis. BIC is very similar to AIC except that it puts more penalty to the number of variables included.
xlab = "Number of variables",
ylab = "BIC",
type = "l")
points(which.min(reg.summary$bic), reg.summary$bic[which.min(reg.summary$bic)], col="red",cex=2,pch=20)
######################
subsetted.model_v1 <- lm(violent_ratio_square ~ pop_den + black_ratio +
LowdensityResidential + less_than_hs_ratio, data = df)
summary(subsetted.model_v1)
AIC(model_2, model_2_1)
round(cor_matrix,2)
##Best subset
full.model_n <- lm(nonviolent_ratio_square ~ pop_den + median_incomeE + black_ratio +
LowdensityResidential + Commercial + less_than_hs_ratio, data = df)
subset.model_n <- regsubsets(formula(full.model_n),
data = df,
nvmax = 6,
method = "exhaustive")
reg.summary_n <- summary(subset.model_n)
reg.summary_n
par(mfrow = c(2,2)) # This code specifies that, instead of showing only one graph in the plots window, you want 4 (2 x 2) graphs.
plot(reg.summary_n$rsq, # This code plots the number of variables on x-axis and r-squared values on y-axis
xlab = "Number of variables",
ylab = "R-Squared",
type = "l") # type = "l" means that you want to display the graph with a line, not points.
plot2 <- plot(reg.summary_n$adjr2, # Adjusted r-squared values on y-axis
xlab = "Number of variables",
ylab = "Adjusted R-Sqaured",
type = "l")
points(which.max(reg.summary_n$adjr2), # This code inserts a red dot on the line graph. The red dot denotes the point where the adjusted R-squared is at its highest.
reg.summary_n$adjr2[which.max(reg.summary_n$adjr2)],
col="red",
cex=2,
pch=20)
plot(reg.summary_n$rss, # sum of squares residual values on y-axis
xlab = "Number of variables",
ylab = "RSS",
type = "l")
plot(reg.summary_n$bic, # BIC values on y-axis. BIC is very similar to AIC except that it puts more penalty to the number of variables included.
xlab = "Number of variables",
ylab = "BIC",
type = "l")
points(which.min(reg.summary_n$bic), reg.summary_n$bic[which.min(reg.summary_n$bic)], col="red",cex=2,pch=20)
cor(df$LowdensityResidential, df$Commercial)
View(df)
AIC(model_2, model_2_1)
######################optimal regression in nonviolent model
subsetted.model_v1_n <- lm(nonviolent_ratio_square ~ pop_den + LowdensityResidential + Commercial + less_than_hs_ratio, data = df)
summary(subsetted.model_v1_n)
summary(subsetted.model_v1)
summary(subsetted.model_v1_n)
View(df)
# Normalization or Standardize
df <- df %>%
mutate(violent_ratio_square = log(violent_ratio + 0.001),
nonviolent_ratio_square = log(nonviolent_ratio + 0.001))
View(df)
model_1 <- lm(violent_ratio_square ~ pop_den + median_incomeE +
LowdensityResidential, data = df)
summary(model_1)
rm(df$violent_ratio_square, df$nonviolent_ratio_square)
rm(c(df$violent_ratio_square, df$nonviolent_ratio_square))
rm(df$violent_ratio_square)
df[,-df$violent_ratio_square]
View(df)
df
View(df)
df[,-violent_ratio_square]
df[,-"violent_ratio_square"]
df = subset(df, select = -c(violent_ratio_square,nonviolent_ratio_square))
df
head(df)
model_1 <- lm(log(violent_ratio + 0.001) ~ pop_den + median_incomeE +
LowdensityResidential, data = df)
summary(model_1)
View(df)
# bestsubsets <- regsubsets(violent_ratio_square ~ pop_den + black_ratio + median_incomeE +
#                             LowdensityResidential, data = df, nbest = 1)
# subsets(bestsubsets, statistic = "adjr2")'
log(df$violent_ratio + 0.001)
# bestsubsets <- regsubsets(violent_ratio_square ~ pop_den + black_ratio + median_incomeE +
#                             LowdensityResidential, data = df, nbest = 1)
# subsets(bestsubsets, statistic = "adjr2")'
log(df$violent_ratio * 100 + 0.001)
model_1 <- lm(log(violent_ratio * 100 + 0.001) ~ pop_den + median_incomeE +
LowdensityResidential, data = df)
summary(model_1)
model_1 <- lm(log(violent_ratio + 0.001) ~ pop_den + median_incomeE +
LowdensityResidential, data = df)
summary(model_1)
df <- read.csv("data_final.csv")
model_1 <- lm(log(violent_ratio + 0.001) ~ pop_den * 100 + median_incomeE +
LowdensityResidential, data = df)
summary(model_1)
model_1 <- lm(log(violent_ratio*1000 + 0.001) ~ pop_den * 100 + median_incomeE +
LowdensityResidential, data = df)
summary(model_1)
model_1 <- lm(log(violent_ratio*1000 + 0.001) ~ pop_den * 100 + median_incomeE +
LowdensityResidential, data = df)
model_1 <- lm(log((violent_ratio*1000) + 0.001) ~ pop_den * 100 + median_incomeE +
LowdensityResidential, data = df)
# bestsubsets <- regsubsets(violent_ratio_square ~ pop_den + black_ratio + median_incomeE +
#                             LowdensityResidential, data = df, nbest = 1)
# subsets(bestsubsets, statistic = "adjr2")'
log(df$violent_ratio*1000 + 0.001)
source("~/GitHub/AtlantaCrime/Regression_hojung.R", echo=TRUE)
model_1 <- lm(log(violent_ratio*1000 + 0.001) ~ pop_den * 100 + median_incomeE +
LowdensityResidential, data = df)
# bestsubsets <- regsubsets(violent_ratio_square ~ pop_den + black_ratio + median_incomeE +
#                             LowdensityResidential, data = df, nbest = 1)
# subsets(bestsubsets, statistic = "adjr2")'
#Log of Dependent Variables and Population Density * 100
df <- df %>%
mutate(
pop_den_scaled = pop_den * 100,
violent_ratio_transformed = log(violent_ratio * 1000 + 0.001)
)
model_1 <- lm(violent_ratio_transformed ~ pop_den_scaled + median_incomeE +
LowdensityResidential, data = df)
summary(model_1)
# bestsubsets <- regsubsets(violent_ratio_square ~ pop_den + black_ratio + median_incomeE +
#                             LowdensityResidential, data = df, nbest = 1)
# subsets(bestsubsets, statistic = "adjr2")'
#Log of Dependent Variables and Population Density * 100
df <- df %>%
mutate(
pop_den_scaled = pop_den * 100,
violent_ratio_transformed = log(violent_ratio + 0.001)
)
model_1 <- lm(violent_ratio_transformed ~ pop_den_scaled + median_incomeE +
LowdensityResidential, data = df)
summary(model_1)
plot(model_1)
df <- read.csv("data_final.csv")
plot(df$pop_den, log(df$violent_ratio))
plot(df$pop_den, log(df$violent_ratio + 0.001))
plot(df$pop_den^2, log(df$violent_ratio + 0.001))
plot((df$pop_den*1000)^2, log(df$violent_ratio + 0.001))
ncvTest(model_1)
library(lmtest)
ncvTest(model_1)
summary(model_1)
plot((df$pop_den*1000)^2, log(df$violent_ratio + 0.001))
ncvTest(model_1)
model_1 <- lm(I(log(violent_ratio + 0.001)) ~ I(pop_den ^ 2) + median_incomeE +
LowdensityResidential, data = df)
summary(model_1)
ncvTest(model_1)
model_1 <- lm(I(log(violent_ratio + 1)) ~ I(pop_den ^ 2) + median_incomeE +
LowdensityResidential, data = df)
summary(model_1)
ncvTest(model_1)
plot(model_1)
model_1 <- lm(I(log(violent_ratio*1000 + 0.001)) ~ I(pop_den ^ 2) + median_incomeE +
LowdensityResidential, data = df)
summary(model_1)
ncvTest(model_1)
plot(model_1)
model_1 <- lm(I(log(violent_ratio*1000 + 0.001)) ~ I(pop_den * 100) + median_incomeE +
LowdensityResidential, data = df)
summary(model_1)
model_1 <- lm(I(log(violent_ratio*1000 + 0.001)) ~ pop_den + median_incomeE +
LowdensityResidential, data = df)
summary(model_1)
model_1 <- lm(I(log(violent_ratio*1000 + 0.001)) ~ I(black_ratio*100) + median_incomeE +
LowdensityResidential, data = df)
summary(model_1)
model_1 <- lm(I(log(violent_ratio*1000 + 0.001)) ~ I(black_ratio*100) +
LowdensityResidential, data = df)
summary(model_1)
plot(model_1)
full.model <- lm(I(log(violent_ratio*1000 + 0.001)) ~ pop_den + median_incomeE + I(black_ratio*100) +
LowdensityResidential + I(less_than_hs_ratio*100), data = df)
##Stepwise
null.model <- lm(I(log(violent_ratio*1000 + 0.001)) ~ 1, data = df)
step.model.for <- step(null.model,
scope = formula(full.model),
direction = "forward",
trace = 0)
step.model.back <- step(full.model,
direction = "backward",
trace = 0)
step.model.both <- step(null.model,
scope = formula(full.model),
direction = "both",
trace = 0)
stargazer(step.model.for, step.model.back, step.model.both,
type = "text",
add.lines = list(c("AIC", round(AIC(step.model.for),1), round(AIC(step.model.back),1), round(AIC(step.model.both),1))),
column.labels = c("Forward", "Backward", "Both"))
subset.model <- regsubsets(formula(full.model),
data = df,
nvmax = 5,
method = "exhaustive")
##Subset models
reg.summary <- summary(subset.model)
reg.summary
par(mfrow = c(2,2)) # This code specifies that, instead of showing only one graph in the plots window, you want 4 (2 x 2) graphs.
plot(reg.summary$rsq, # This code plots the number of variables on x-axis and r-squared values on y-axis
xlab = "Number of variables",
ylab = "R-Squared",
type = "l") # type = "l" means that you want to display the graph with a line, not points.
plot2 <- plot(reg.summary$adjr2, # Adjusted r-squared values on y-axis
xlab = "Number of variables",
ylab = "Adjusted R-Sqaured",
type = "l")
points(which.max(reg.summary$adjr2), # This code inserts a red dot on the line graph. The red dot denotes the point where the adjusted R-squared is at its highest.
reg.summary$adjr2[which.max(reg.summary$adjr2)],
col="red",
cex=2,
pch=20)
plot(reg.summary$rss, # sum of squares residual values on y-axis
xlab = "Number of variables",
ylab = "RSS",
type = "l")
plot(reg.summary$bic, # BIC values on y-axis. BIC is very similar to AIC except that it puts more penalty to the number of variables included.
xlab = "Number of variables",
ylab = "BIC",
type = "l")
points(which.min(reg.summary$bic), reg.summary$bic[which.min(reg.summary$bic)], col="red",cex=2,pch=20)
######################optimal regression in violent crime
subsetted.model_v1 <- lm(I(log(violent_ratio*1000 + 0.001)) ~ I(black_ratio * 100) + LowdensityResidential + I(less_than_hs_ratio * 100), data = df)
summary(subsetted.model_v1)
log(df$violent_ratio*1000 + 0.001)
log(df$violent_ratio*10000 + 0.001)
ncvTest(subsetted.model_v1)
ncvTest(subsetted.model_v1)
library(tidyverse)
library(GGally)
library(sjPlot)
library(car)
library(leaps)
library(stargazer)
library(lmtest)
ncvTest(subsetted.model_v1)
resid(subsetted.model_v1)
plot(resid(subsetted.model_v1))
plot(subsetted.model_v1)
plot(subsetted.model_v1)
vif(subsetted.model_v1)
##Check Multicollinearity
vif_values_v1 <- vif(subsetted.model_v1)
barplot(vif_values, main = "VIF Values", horiz = TRUE, col = "steelblue")
barplot(vif_values_v1, main = "VIF Values", horiz = TRUE, col = "steelblue")
View(df)
cor_matrix <- cor(df[reg_variables])
round(cor_matrix,2)
ggpairs(df[,reg_variables])
par(mfrow = c(2,2)) # This code specifies that, instead of showing only one graph in the plots window, you want 4 (2 x 2) graphs.
plot(reg.summary$rsq, # This code plots the number of variables on x-axis and r-squared values on y-axis
xlab = "Number of variables",
ylab = "R-Squared",
type = "l") # type = "l" means that you want to display the graph with a line, not points.
plot2 <- plot(reg.summary$adjr2, # Adjusted r-squared values on y-axis
xlab = "Number of variables",
ylab = "Adjusted R-Sqaured",
type = "l")
points(which.max(reg.summary$adjr2), # This code inserts a red dot on the line graph. The red dot denotes the point where the adjusted R-squared is at its highest.
reg.summary$adjr2[which.max(reg.summary$adjr2)],
col="red",
cex=2,
pch=20)
plot(reg.summary$rss, # sum of squares residual values on y-axis
xlab = "Number of variables",
ylab = "RSS",
type = "l")
plot(reg.summary$bic, # BIC values on y-axis. BIC is very similar to AIC except that it puts more penalty to the number of variables included.
xlab = "Number of variables",
ylab = "BIC",
type = "l")
points(which.min(reg.summary$bic), reg.summary$bic[which.min(reg.summary$bic)], col="red",cex=2,pch=20)
plot(subsetted.model_v1)
plot(resid(subsetted.model_v1))
